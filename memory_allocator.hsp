#ifndef memory_allocator
#addition "../hsp_common/id_manager.hsp"
#module memory_allocator memory_pool, offset, mem_size, block_state, back_mem_id, next_mem_id, next_free_id, back_free_id, mem_head, mem_tail, sentinel

#define DEBUG_ALLOCATOR

//get_class_index関数と合わせて調整してください
#const CLASS_NUM 6 //使用するクラスの数
#const FREELIST_THRESHOLD 16 //このサイズ以下の領域はフリーリストに登録しない

//プールサイズ設定(調整可能です）
#const DEFAULT_POOL_SIZE 200000
#const MAX_EXPAND_LIMIT 300000000 ; 287MB
#const MIN_POOL_SIZE 100

//-------------------------------------------
#const OFFSET_SENTINEL -1234567
#const MEM_SENTINEL_SIZE -9999999

#const SENTINEL_NUM CLASS_NUM + 1 //フリーリストのクラスの番兵の数 + 末尾番兵
#const MEM_SENTINEL_NUM 2 //メモリプールの先頭と末尾の番兵数

#enum STATE_SENTINEL 0
#enum STATE_USED
#enum STATE_FREE
#enum STATE_HEAD
#enum STATE_TAIL

#define link_blocks(%1,%2) :\
	next_mem_id(%1) = %2:\
	back_mem_id(%2) = %1
#define link_free_list(%1,%2) :\
	next_free_list(%1) = %2:\
	back_free_list(%2) = %1
	
#modinit int size, int div_num

	//アロケータを任意のサイズで初期化します。既に発行したブロックは全て無効になるので注意。
	
	//size -> 目安は、200,000(標準システム向け)、500,000〜(高負荷システム向け)を推奨（省略可能)
	//div_num -> 予め確保するブロックの数になります。(省略可能）
	
	if size <= 0{
		sdim memory_pool, DEFAULT_POOL_SIZE
	}else{
		sdim memory_pool, limit(size, MIN_POOL_SIZE, MAX_EXPAND_LIMIT)
	}

	if div_num <= 0{
		MAX_DIV = varsize(memory_pool) / FREELIST_THRESHOLD + SENTINEL_NUM + MEM_SENTINEL_NUM
	}else{
		MAX_DIV = limit(div_num, MIN_POOL_SIZE, varsize(memory_pool))
	}
	
	dim offset, MAX_DIV //メモリプール上のオフセット
	dim mem_size, MAX_DIV //メモリのサイズ
	dim block_state, MAX_DIV //このブロックが空きか、使用中か、番兵か？など。
	dim back_mem_id, MAX_DIV //前のブロックid
	dim next_mem_id, MAX_DIV //次のブロックid

	dim next_free_list, MAX_DIV
	dim back_free_list, MAX_DIV
	
	dim mem_id_manager
	newmod mem_id_manager, id_manager, MAX_DIV

	//フリーリスト構築
	dim SENTINEL, SENTINEL_NUM //番兵用のID
	pre_sentinel = -1
	repeat SENTINEL_NUM
		SENTINEL(cnt) = get_new_id(mem_id_manager) //番兵用のIDを確保

		back_free_list(SENTINEL(cnt)) = pre_sentinel
		if cnt{
			next_free_list(pre_sentinel) = SENTINEL(cnt)
		}

		block_state(SENTINEL(cnt)) = STATE_SENTINEL
		back_mem_id(SENTINEL(cnt)) = -1
		next_mem_id(SENTINEL(cnt)) = -1
		offset(SENTINEL(cnt)) = OFFSET_SENTINEL
		mem_size(SENTINEL(cnt)) = MEM_SENTINEL_SIZE

		pre_sentinel = SENTINEL(cnt)
	loop
	next_free_list(SENTINEL(CLASS_NUM)) = -1

	//メモリブロック構築
	//ヘッドとテールの番兵を作成
	MEM_HEAD = get_new_id(mem_id_manager)
	MEM_TAIL = get_new_id(mem_id_manager)

	block_state(MEM_HEAD) = STATE_HEAD
	block_state(MEM_TAIL) = STATE_TAIL

	back_mem_id(MEM_HEAD) = -1
	next_mem_id(MEM_TAIL) = -1

	offset(MEM_HEAD) = 0
	mem_size(MEM_HEAD) = 0
	offset(MEM_TAIL) = varsize(memory_pool)
	mem_size(MEM_TAIL) = 0

	//最初のフリーブロックの作成
	newid = get_new_id(mem_id_manager)
	offset(newid) = 0
	mem_size(newid) = varsize(memory_pool)

	//メモリ上での連結を構築
	link_blocks MEM_HEAD, newid
	link_blocks newid, MEM_TAIL

	//フリーリストに追加
	add_to_free_list thismod, newid
	return

#defcfunc local get_class_index int size
	#ifdef DEBUG_ALLOCATOR
	if size < 0{
		logmes "ERROR！サイズがマイナスで呼ばれました。想定していない処理です\nコールスタックを確認して原因を特定してください\n" + pattern_flag + " : " + right + " : " + left
		stop
	}
	#endif
	if size < 32 : return 0
	if size < 64 : return 1
	if size < 128: return 2
	if size < 256: return 3
	if size < 512: return 4
	return 5
	
#modcfunc local get_class_index_by_id int id
	return get_class_index(mem_size(id))
	
#modfunc debug_check_free_list_integrity

	//番兵検査（固定の情報がいじられていないか？）
	repeat SENTINEL_NUM
		if block_state(SENTINEL(cnt)) != STATE_SENTINEL: logmes "番兵が壊れてます": stop
		if back_mem_id(SENTINEL(cnt)) != -1: logmes "番兵が壊れています": stop
		if next_mem_id(SENTINEL(cnt)) != -1: logmes "番兵が壊れています": stop
		if offset(SENTINEL(cnt)) != OFFSET_SENTINEL: logmes "番兵が壊れています": stop
		if mem_size(SENTINEL(cnt)) != MEM_SENTINEL_SIZE: logmes "番兵が壊れています": stop
	loop

	//フリーリストのリンクチェック
	dim id_check, get_max_id(mem_id_manager) + 1 //発行したIDの最大値分確保

	sentinel_count = 0
	start_point = SENTINEL(0)
	while start_point >= 0

		id_check(start_point)++
		if id_check(start_point) >= 2{
			logmes "重複登録を発見しました"
			stop
		}

		if next_free_list(start_point) >= 0 {
			if back_free_list(next_free_list(start_point)) != start_point {
				logmes "next→back が一致しません at ID=" + start_point
				stop
			}
		}
		if back_free_list(start_point) >= 0 {
			if next_free_list(back_free_list(start_point)) != start_point {
				logmes "back→next が一致しません at ID=" + start_point
				stop
			}
		}

		switch block_state(start_point)

		case STATE_FREE
			assert block_state(next_mem_id(start_point)) == STATE_USED || block_state(next_mem_id(start_point)) == STATE_TAIL //フリーブロックの次は使用中かテールであること
		swbreak
		case STATE_SENTINEL
			sentinel_count++
		swbreak
		case STATE_USED
			logmes "使用中のブロックがフリーリストに入っています\n ブロック番号→" + start_point
			stop
		swbreak
		default
			logmes "不明なブロックがフリーリストに入っています\n ブロック番号→" + start_point + "\n ブロックタイプ→" + block_state(start_point)
			stop
		swbreak
		swend
			
		start_point = next_free_list(start_point)
	wend

	if sentinel_count != SENTINEL_NUM{
		logmes "フリーリスト内の番兵の数が異常です\n expected = " + SENTINEL_NUM + "\n actual = " + sentinel_count
		stop
	}

	return
	
#modfunc local remove_from_free_list int id, local class_id

	//フリーリストから削除する、それだけなので、全体の前後の結合は呼び出し元で行うこと。
	if block_state(id) != STATE_FREE {
		if block_state(id) == STATE_SENTINEL {
			logmes "番兵を削除しようとしました！！！"
		} else {
			logmes "使用中ブロックを削除しようとしました"
		}
		stop
	}

	link_free_list back_free_list(id), next_free_list(id)
	block_state(id) = STATE_USED
	return

	
#modfunc local resize_free_block int id, int newsize

	//指定されたフリーブロックのサイズを変更する

	if block_state(id) != STATE_FREE{
		logmes "フリーブロックでないブロックです!!【resize_free_block】"
		return
	}
	
	if get_class_index_by_id(thismod, id) == get_class_index(newsize) {
		//クラス変動なし
		mem_size(id) = newsize
		return
	}
	
	//削除して
	remove_from_free_list thismod, id

	//新たなサイズに更新して再登録
	mem_size(id) = newsize
	add_to_free_list thismod, id
	
	return
	
#modfunc local add_to_free_list int id, local _class_

	_class_ = get_class_index(mem_size(id))

	class_top = SENTINEL( get_class_index(mem_size(id)) )

	//idを割り込ませる
	link_free_list id, next_free_list(class_top)
	link_free_list class_top, id

	block_state(id) = STATE_FREE

	#ifdef DEBUG_ALLOCATOR
	debug_check_free_list_integrity thismod
	#endif

	return
	
#modcfunc local get_free_block int size

	//フリーリストから探して見つかったら取り出す
	//指定サイズのクラス以上の空きブロックを探す

	start_node = next_free_list(SENTINEL(get_class_index(size)))

	//検索開始、各クラスの番兵のサイズはマイナスなのでリストの最後までいける。

	while start_node >= 0
	
		if mem_size(start_node) >= size{

			link_free_list back_free_list(start_node), next_free_list(start_node)

			block_state(start_node) = STATE_USED
			
			return start_node
		}
		start_node = next_free_list(start_node) 
	wend

	return -1
	
#modfunc shrink_block int target_id, int size

	//有効なブロックを指定サイズに縮小する(単純縮小なので内容が削られることもある)

	if is_id_alive(mem_id_manager, target_id) == 0: return 1 //無効なID
	if block_state(target_id) != STATE_USED: return 2
	if size <= 0: return 3
	if size > mem_size(target_id): return 4

	next_block_id = next_mem_id(target_id)

	if block_state(next_block_id) == STATE_FREE{

		//次のブロックがフリーなら、次のブロックのオフセットとサイズを変更。
		offset(next_block_id) = offset(target_id) + size
		resize_free_block thismod, next_block_id, offset(next_mem_id(next_block_id)) - offset(next_block_id)
		
	}else: if offset(next_block_id) - offset(target_id) - size > FREELIST_THRESHOLD{

		//新たな空き空間を作成
		new_free_id = get_new_id(mem_id_manager)

		link_blocks new_free_id, next_block_id
		link_blocks target_id, new_free_id

		offset(new_free_id) = offset(target_id) + size
		mem_size(new_free_id) = mem_size(target_id) - size

		//フリーリストに登録
		add_to_free_list thismod, new_free_id
		
	}

	mem_size(target_id) = size
	
	return 0
	
#modcfunc get_new_block int size
	if size <= 0{
		logmes "サイズ０以下では確保できません! 【 get_new_block() 】"
		
		return -1
	}
	
	newid = get_free_block(thismod, size)

	if newid >= 0{
		shrink_block thismod, newid, size //必要な分だけにセット
		memset memory_pool, 0, size, offset(newid) //get_new_blockなのでお掃除
		return newid
	}

	//以下新規発行
	memexpand memory_pool, offset(MEM_TAIL) + size + FREELIST_THRESHOLD //余裕を持って拡張
	if varsize(memory_pool) > MAX_EXPAND_LIMIT{
		logmes "メモリプールの最大サイズを超えました！" + strf("(%d > %d)", varsize(memory_pool), MAX_EXPAND_LIMIT)
		stop
	}
	//新たなIDを取得
	newid = get_new_id(mem_id_manager)
	//新たなブロックのオフセットとサイズを設定
	offset(newid) = offset(MEM_TAIL)
	mem_size(newid) = size
	//新たなブロックの状態を設定
	block_state(newid) = STATE_USED
	//新たなブロックの前後のリンクを設定
	link_blocks back_mem_id(MEM_TAIL), newid
	link_blocks newid, MEM_TAIL
	//メモリプールの状態を更新
	offset(MEM_TAIL) = varsize(memory_pool)

	return newid


#modfunc free_block int id

	//使用中のブロックを解放する。左右の領域を吸収して、フリーリストに返す。

	if is_id_alive(mem_id_manager, id) == 0: return 0 //無効なID
	if block_state(id) != STATE_USED: return 0//使用中ではないブロック
	
	prev_id = back_mem_id(id) //前のブロックid
	next_id = next_mem_id(id) //次のブロックid

	pattern_flag = (block_state(prev_id) == STATE_FREE) | (block_state(next_id) == STATE_FREE) << 1
		
	switch pattern_flag
	case 0 //どちらにも統合なし
		right = offset(next_id)
		left = offset(prev_id) + mem_size(prev_id)
		
		offset(id) = left
		mem_size(id) = right - left
		
		if mem_size(id) > FREELIST_THRESHOLD{
			//フリーリストに登録
			add_to_free_list thismod, id
		}else{
			//小断片なので無視し、前後を連結する
			link_blocks prev_id, next_id
			release_id mem_id_manager, id //id返却
		}
	swbreak
				
	case 1 //左にのみ統合
		left = offset(prev_id)
		right = offset(next_id)
		//連結更新
		resize_free_block thismod, prev_id, right - left
		
		link_blocks prev_id, next_id

		release_id mem_id_manager, id //idは消失
	swbreak

	case 2 //右にのみ統合
	
		right = offset(next_mem_id(next_id))
		left = offset(prev_id) + mem_size(prev_id)
		
		resize_free_block thismod, next_id, right - left

		offset(next_id) = left
		//連結更新
		link_blocks prev_id, next_id
		
		release_id mem_id_manager, id //idは消失
	swbreak
	
	case 3 //左右に統合 -> prev_idに統一する
	
		left = offset(prev_id)
		right = offset(next_mem_id(next_id))

		resize_free_block thismod, prev_id, right - left

		remove_from_free_list thismod, next_id //nextはフリーリストに存在するはずなので削除

		//連結更新
		link_blocks prev_id, next_mem_id(next_id)

		//消失idを返却
		release_id mem_id_manager, id
		release_id mem_id_manager, next_id
	swbreak
	swend

	#ifdef DEBUG_ALLOCATOR
	debug_check_link_integrity thismod, "free_block pattern_flag -> " + pattern_flag + " id=" + id
	debug_check_free_list_integrity thismod
	debug_check_memory_pool_integrity thismod
	#endif
	
	return 1
	
#modfunc debug_check_link_integrity str lab

	//番兵検査（固定の情報がいじられていないか？）
	if block_state(MEM_HEAD) != STATE_HEAD: logmes "番兵が壊れています expected =" + STATE_HEAD + " actural ="  + block_state(MEM_HEAD) + "\n" + MEM_HEAD:stop
	if block_state(MEM_TAIL) != STATE_TAIL: logmes "番兵が壊れています expected =" + STATE_TAIL + " actural ="  + block_state(MEM_TAIL) + "\n" + MEM_TAIL:stop

	if offset(MEM_HEAD) != 0: logmes "番兵が壊れています": stop
	if mem_size(MEM_HEAD) != 0: logmes "番兵が壊れています": stop
	
	list_count = get_block_count(thismod)
	

	//開始点から最後まで到達できるか、バックリンクと循環も含めてチェック
	count = 0
	__prev_id = MEM_HEAD
	start_point = next_mem_id(MEM_HEAD)
	while start_point != MEM_TAIL
		if back_mem_id(start_point) != __prev_id {
			logmes "[リンクチェック失敗] " + strf("%d > (%d=%d) < %d", __prev_id, start_point, back_mem_id(start_point), start_point) + "次の前がリンクしていません\n" + lab
			stop
		}
		if count > list_count{
			logmes "[リンクチェック失敗] 循環検出: " + lab
			stop
		}
		__prev_id = start_point
		start_point = next_mem_id(start_point)
		count++
	wend
	
	if count != list_count{
		logmes "[リンクチェック失敗] 使用中のブロック数とリンク数が一致しない：" + lab
		stop
	}

	
	return
	
#modfunc debug_check_memory_pool_integrity

	//右からチェック、ブロックがオーバーラップしたり、離れすぎていないか？
	start_point = MEM_TAIL
	
	while start_point != MEM_HEAD
	
		offset_point = offset(start_point)
		
		if offset_point < 0{
			logmes "オフセットが範囲外です（マイナス）"
			stop
		}

		pre_point = start_point
		start_point = back_mem_id(start_point) //左のブロックに移動

		gap = (offset_point) - (offset(start_point) + mem_size(start_point))
		if gap < 0{
			logmes "領域がオーバーラップしています :: " + start_point + " <> " + pre_point + " ::\n"  + strf("(%d,%d) <-> (%d,%d)", offset(start_point), offset(start_point) + mem_size(start_point) , offset(pre_point), offset(pre_point) + mem_size(pre_point)) 
			stop
		}
		if gap > FREELIST_THRESHOLD{
			logmes "行方不明空間あり :: " + start_point + " <> " + pre_point + " ::\n"  + strf("(%d,%d) <-> (%d,%d)", offset(start_point), offset(start_point)+ mem_size(start_point) , offset(pre_point), offset(pre_point) + mem_size(pre_point)) 
			stop
		}
		
	wend
		
	return

#modfunc expand_block int oldid, int newsize
	/*
	ブロックの拡張を試みる。
	左右のブロックを確認し、拡張可能であれば拡張する。
	拡張できなかった場合は、左右の領域を吸収して、ブロックを移動する。
	*/
	if is_id_alive(mem_id_manager, oldid) == 0: return 0
	if block_state(oldid) != STATE_USED: return 0
	if newsize <= 0: return 0

	offset_original = offset(oldid)
	size_original = mem_size(oldid)
	mem_size(oldid) = newsize //新しいサイズを仮セット

	if try_expand_right(thismod, oldid, newsize): return 1
	if try_expand_left(thismod, oldid, newsize): return 1
	
	return tryrelocate_block(thismod, oldid, newsize)

#modcfunc local try_expand_right int oldid, int newsize

	//右拡張を試みる。不可能だった場合、フリーブロックの吸収だけ行う。
	
	nid = next_mem_id(oldid)
	if block_state(nid) == STATE_FREE{
		gap = offset(next_mem_id(nid)) - offset_original
		if newsize <= gap{
			if gap <= FREELIST_THRESHOLD + newsize{
				remove_free_block thismod, nid
			}else{
				//右オフセット移動
				offset(nid) = offset_original + newsize
				//右のサイズ変更
				resize_free_block thismod, nid, offset(next_mem_id(nid)) - offset(nid)
				assert mem_size(nid) > FREELIST_THRESHOLD

			}
			
			#ifdef DEBUG_ALLOCATOR
			debug_check_link_integrity thismod, "右側拡張成功 free"
			debug_check_memory_pool_integrity thismod
			#endif
			
			return 1
		}
		//右のフリーブロックを削除
		remove_free_block thismod, nid
	}else{
		if newsize <= offset(nid) - offset_original{//右ブロックまでの隙間でOK
		
			#ifdef DEBUG_ALLOCATOR
			debug_check_link_integrity thismod, "右側拡張成功 used"
			debug_check_memory_pool_integrity thismod
			#endif
			
			return 1
		}
	}
	return 0
	
#modcfunc local try_expand_left int oldid, int newsize

	//左拡張を試みる。不可能だった場合、フリーブロックの吸収だけ行う。

	//左側のチェック開始
	bid = back_mem_id(oldid)
	right = offset(next_mem_id(oldid))
	if block_state(bid) == STATE_FREE{
		gap = right - offset(bid)
		if newsize <= gap{//拡張可能
		
			//左の位置を自分のものにする
			offset(oldid) = offset(bid) 
			memcpy memory_pool, memory_pool, size_original, offset(oldid), offset_original

			if gap <= FREELIST_THRESHOLD + newsize{
				remove_free_block thismod, bid //左ブロックを削除

			}else{
				swap_adjacent_blocks thismod, oldid //隣接ブロックのリンクを入れ替え(指定IDとその左隣のブロックのリンクを入れ替える)

				//左ブロックのオフセットをIDブロックの右端にセット
				offset(bid) = offset(oldid) + newsize
				//左ブロックのサイズ変更
				resize_free_block thismod, bid, right - offset(bid)
				assert mem_size(bid) > FREELIST_THRESHOLD
				
			}
			
			#ifdef DEBUG_ALLOCATOR
			debug_check_link_integrity thismod, "左側拡張成功 free"
			debug_check_memory_pool_integrity thismod
			#endif
			
			return 1
		}
		remove_free_block thismod, bid
		
	}else{
		if newsize <= right - (offset(bid) + mem_size(bid)){ //左ブロックまでの隙間で収まる
		
			//オフセットを左に詰める
			offset(oldid) = offset(bid) + mem_size(bid)
			memcpy memory_pool, memory_pool, size_original, offset(oldid), offset_original
			
			#ifdef DEBUG_ALLOCATOR
			debug_check_link_integrity thismod, "左側拡張成功 used"
			debug_check_memory_pool_integrity thismod
			#endif
			
			return 1
		}
	}
	
	
	return 0
	
#modcfunc local tryrelocate_block int oldid, int newsize
	/*	
	４と、空きスペース（９）を入れ替えるとき、
	
	1,2,3,(3,4,5),5,6,7,8,(8,9,10),10,11
					↓
	1,2,3,(3,9,5),5,6,7,8,(8,4,10),10,11

	このように組み替えればよい。

	この操作はメモリプール上には、一切影響を与えないため、メモリコピー操作は別次元で考えてよい。
	メモリ上のオフセットやサイズは単純なswap操作でOK

	完全に情報を交換した後、元居たリンク上の場所、つまり新しく確保したブロックIDを削除する。

	1,2,3,(3,9,5),5,6,7,8,(8,4,10),10,11
	         ↑９がフリーリストに入る。

	元が最後のブロックだった場合、新規調達すると隣接交換になってしまうので、直接元のブロックを拡張して対応。
	
	*/

	offset(oldid) = offset(back_mem_id(oldid)) + mem_size(back_mem_id(oldid))

	//移動可能ブロックを選択
	newid = get_free_block(thismod, newsize)
	
	if newid = -1{
		//フリーリストに見つからなかった
		
		if next_mem_id(oldid) == MEM_TAIL{
			//末尾なら直接拡張
			if offset(oldid) + newsize > MAX_EXPAND_LIMIT{
				logmes "末尾ブロックの拡張失敗"
				stop
			}
			mem_size(oldid) = newsize
			offset(MEM_TAIL) = offset(oldid) + newsize
			memexpand memory_pool, offset(oldid) + newsize
			memcpy memory_pool, memory_pool, size_original, offset(oldid), offset_original
			return 1
		}

		//新たなブロックを確保
		
		newid = get_new_block(thismod, newsize)

	}else{
		assert mem_size(newid) >= newsize
		shrink_block thismod, newid, newsize
	}
	
	mem_size(oldid) = offset(next_mem_id(oldid)) - offset(oldid) //右側のブロックまでのサイズをセット
	
	//構造交換
	bnewid = back_mem_id(newid)
	nnewid = next_mem_id(newid)
	boldid = back_mem_id(oldid)
	noldid = next_mem_id(oldid)
	back_mem_id(newid) = boldid: next_mem_id(boldid) = newid
	next_mem_id(newid) = noldid: back_mem_id(noldid) = newid
	back_mem_id(oldid) = bnewid: next_mem_id(bnewid) = oldid
	next_mem_id(oldid) = nnewid: back_mem_id(nnewid) = oldid

	//構造交換完了
	
	//それぞれのブロックの「内容」を復元
	memcpy memory_pool, memory_pool, size_original, offset(newid), offset_original
	swap offset(newid), offset(oldid)
	swap mem_size(newid), mem_size(oldid)
		
	free_block thismod, newid //解放

	return 1

#modfunc local remove_free_block int target_id

    if block_state(target_id) != STATE_FREE: return 0 // フリーブロックのみ許可
    
    remove_from_free_list thismod, target_id // フリーリストから削除
    link_blocks back_mem_id(target_id), next_mem_id(target_id) // 前後のブロックをリンク
    release_id mem_id_manager, target_id// IDを返却
    
return 1

#modfunc local swap_adjacent_blocks int nowid
	// 指定されたIDのブロックとその左隣のブロックのリンクのみを入れ替える
	
	_prev_id = back_mem_id(nowid)
	_next_id = next_mem_id(nowid)
	
	link_blocks back_mem_id(_prev_id), nowid
	link_blocks nowid, _prev_id
	link_blocks _prev_id, _next_id
	
	return

///////////////////
//////可視化///////
///////////////////

#modfunc draw_memory_pool_with_labels int ysize, int yoffset, array chenged_ids, local sclass, local col, local ofs, local _size
	#const PIXEL 1
	redraw 2
	color 0,255,0 ; 使われておらず、フリーリストにも登録されていない
	boxf 0,yoffset, limit(get_memory_pool_size(thismod) * PIXEL,,ginfo(12)),yoffset+ysize

	vid = next_mem_id(MEM_HEAD)
	while vid != MEM_TAIL
		ofs = offset(vid)
		_size = mem_size(vid)
		sclass = get_class_index(_size)
		col = get_color_by_class(thismod, sclass)

		//領域描画
		
		//領域の色分け
		if block_state(vid) == STATE_USED{
			color $D3,$D3,$D3
		}else: if is_in_array(vid, changed_ids){
			color 255,200,0
		}else{
			//使われていない領域はクラスで色分け
			color col>>16&255,col>>8&255,col&255
		}
		
		boxf ofs*PIXEL+1,yoffset, (ofs + _size)*PIXEL-1, yoffset+ysize

		color 0,0,0
		pos ofs*PIXEL+1,yoffset + ysize/3
		mes _size
		//文字列で使用中ならそれを可視化
		color 255,0,0
		使用量 = strlen(read_mem_str(thismod, vid))
		boxf ofs*PIXEL+1, yoffset+ysize - ysize/4, (ofs + 使用量)*PIXEL-1, yoffset+ysize - ysize/9
		//ブロックID
		color 0,0,0
		pos (ofs + 2 ) * PIXEL, yoffset + 2
		mes vid
		//クラス
		pos (ofs + 2 ) * PIXEL, yoffset + 2 + ysize/2
		mes sclass
		//両側の区切り線
		line ofs * PIXEL                 , yoffset, ofs*PIXEL, yoffset+ysize
		line (ofs + mem_size(vid)) * PIXEL, yoffset, (ofs+mem_size(vid)) * PIXEL,yoffset+ysize

		vid = next_mem_id(vid)
	wend
	redraw
	return
	
#modcfunc local get_color_by_class int _class
	switch _class
	case 0 : return $ff6666
	case 1 : return $ff9933 
	case 2 : return $ffff66
	case 3 : return $66cc66 
	case 4 : return $3399ff 
	case 5 : return $6666ff 
	case 6 : return $cc66ff
	case 7 : return $ff66cc
	case 8 : return $33cc99
	case 9 : return $999999
	default: return $333333
	swbreak
	swend
return
#defcfunc local is_in_array int _value, array a
	for i,, length(a)
		if a(i) == _value : return 1
	next
	return 0

////////////////////////
/////内部情報取得///////
////////////////////////

#modcfunc get_block_offset int id
	return offset(id)

#modcfunc get_block_size int id
    return mem_size(id)

//ブロックが操作可能かどうか
#modcfunc is_usable_block int id
	return block_state(id) == STATE_USED

//メモリプール上に存在するブロックの数（空き含む）
#modcfunc get_block_count
	return get_using_count(mem_id_manager) - SENTINEL_NUM - MEM_SENTINEL_NUM

//操作可能なブロックのリストを取得
#modcfunc get_usable_blocks array a
	an = 0
	now_node = next_mem_id(MEM_HEAD)
	while now_node != MEM_TAIL
		if block_state(now_node) == STATE_USED{
			a(an) = now_node
			an++
		}
		now_node = next_mem_id(now_node)
	wend
	return an

//発行した最大のID番号
#modcfunc get_block_max_id
	return get_max_id(mem_id_manager)

#modcfunc get_memory_pool_size
	return varsize(memory_pool)
	
#modcfunc get_memory_pool_size_max
	return MAX_EXPAND_LIMIT

///////////////////	
//////操作API//////
///////////////////

//文字列として操作
#modfunc write_mem_str int id, str value, int offset_in_block
	//ブロックの指定位置に文字列を書き込む

	if block_state(id) != STATE_USED: return
	if offset_in_block < 0: return
	
	sz = strlen(value)
	vv = value
	if mem_size(id) < offset_in_block + sz{
		expand_block thismod, id, offset_in_block + sz
	}
	memcpy memory_pool, vv, sz, offset(id) + offset_in_block //sz分だけ書き込む
	return

#modfunc re_write_mem_str int id, str value
	//ブロックに文字列を書き込みます。（前の内容はクリアされる）

	if block_state(id) != STATE_USED: return
	
	sz = strlen(value)
	vv = value
	if mem_size(id) < sz{
		expand_block thismod, id, sz
	}
	memset memory_pool, 0, mem_size(id), offset(id)
	memcpy memory_pool, vv, sz, offset(id)
	return

#modcfunc read_mem_str int id, int offset_in_block
	//文字列読み出し
	if block_state(id) != STATE_USED: return ""
	if offset_in_block < 0: return ""
	if offset_in_block > mem_size(id): return ""

	copy_size = mem_size(id) - offset_in_block

	dupptr s, varptr(memory_pool) + offset(id) + offset_in_block, copy_size, 2
	
	return strmid(s, 0, copy_size) //文字列として切り出す
	
#modfunc append_str int id, str value
	//文字列を追加します( += )
	write_mem_str thismod, id, read_mem_str(thismod, id) + value
	return
	
#modfunc insert_str int id, str value, int write_pos
	//文字列を指定位置に挿入します
	tmp = read_mem_str(thismod, id)
	write_mem_str thismod, id, strmid(tmp, 0, write_pos) + value + strmid(tmp, write_pos, $FFFFFFF)
	return

//バイナリ操作
#modfunc poke_block int id, var a, int offset_in_block
	//変数をメモリブロックにコピーします

	if offset_in_block < 0: return
	if block_state(id) != STATE_USED: return

	v_size = varsize(a)
	required = offset_in_block + v_size
	if mem_size(id) < required {
		expand_block thismod, id, required
	}

	usable = mem_size(id) - offset_in_block
	memcpy memory_pool, a, limit(v_size,,usable), offset(id) + offset_in_block
	return
	
#modfunc peek_block int id, var a, int offset_in_block
	//メモリブロックを変数にコピーします

	if block_state(id) != STATE_USED: return
	if offset_in_block < 0: return
	if offset_in_block > mem_size(id): return

	memcpy a, memory_pool, limit(mem_size(id) - offset_in_block,, varsize(a)), 0, offset(id) + offset_in_block
	return
	
#modfunc Lpoke_block int id, int p1, int offset_in_block
	//メモリブロックに直接４バイト書き込み

	if mem_size(id) < offset_in_block + 4 {
		expand_block thismod, id, offset_in_block + 4
	}
	
	lpoke memory_pool, offset(id) + offset_in_block, p1
	return

#modfunc copy_block int id, var a
	//メモリブロックを参照コピーします（読み取り専用です！！！外部から直接変更を加えないようにしてください！！！）
	dupptr a, varptr(memory_pool) + offset(id), mem_size(id), 2
	return

#global

#ifndef swap
#module
#deffunc swap var a, var b
	tmp = a
	a = b
	b = tmp
	return
#global
#endif

#endif