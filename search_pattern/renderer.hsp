#ifndef init_draw_objects
#addition "sort_by_priority_list.hsp"
#addition "listbox_id_manager.hsp"
#addition "color_manager.hsp"
#addition "rboxf.hsp"

#addition "centering_mes.hsp"

#addition "draw_obj/physis.hsp"
#addition "draw_obj/ease.hsp"
#addition "draw_obj/static.hsp"

#addition "label_set.hsp" //タイプ文字列とラベルの紐づけ管理"

#module

#const DRAW_OBJECTS_MAX 3000

#const global PRIORITY_BACK   100000
#const global PRIORITY_NORMAL 200000
#const global PRIORITY_FRONT  300000

#enum global MOVE_TYPE_PHYSIS 0
#enum global MOVE_TYPE_EASE
#enum global MOVE_TYPE_STATIC

#const global LIFE_INSTANT 0.000001
#const global LIFE_FOREVER 99999999.0

#deffunc init_draw_objects
    // オブジェクト基本情報
    dim draw_object_priority , DRAW_OBJECTS_MAX
   	ddim draw_object_life_max, DRAW_OBJECTS_MAX 
	ddim draw_object_life    , DRAW_OBJECTS_MAX
    dim draw_object_move_type, DRAW_OBJECTS_MAX //動き方の方式 easingで動くか、 物理式で動くかなど。
    sdim draw_object_draw_type, DRAW_OBJECTS_MAX //何をどう描画するか -> 文字列！
    dim draw_object_entities , DRAW_OBJECTS_MAX
    sdim draw_object_params  , DRAW_OBJECTS_MAX
    ddim draw_object_life_elapsed, DRAW_OBJECTS_MAX
    
	newmod draw_object_id_manager, list_id_manager, DRAW_OBJECTS_MAX
	newmod labs,label_set

	sdim tmp,, 50 //splitパラ用

	global_draw_dt = 0.016666

    return

#deffunc register_renderer str s1, label l

	label_set_push labs, s1, l
	return

#deffunc _make_draw_object int _move_type, str _draw_type, double life, double _x, double _y, double _w, double _h, str parameters
#defcfunc make_draw_object int _move_type, str _draw_type, double life, double _x, double _y, double _w, double _h, str parameters
	if life <= 0.0{
		logmes "ライフ０以下の描画オブジェクトを作成しようとしました"
		return -1
	}
	
    //基本情報
    
    newid = get_new_list_id(draw_object_id_manager)
    
    draw_object_priority(newid) = PRIORITY_NORMAL
    draw_object_life_max(newid) = life
    draw_object_life(newid) = life
    draw_object_move_type(newid) = _move_type
    draw_object_draw_type(newid) = _draw_type
    draw_object_params(newid) = parameters
    draw_object_life_elapsed(newid) = 0.0
   
	switch draw_object_move_type(newid)
	case MOVE_TYPE_PHYSIS
    	draw_object_entities(newid) = make_physis_obj(_x, _y, _w, _h)
   	swbreak
   	case MOVE_TYPE_EASE
    	draw_object_entities(newid) = make_ease_obj(_x, _y, _w, _h)
    	if life == LIFE_FOREVER{
    		set_easetime_all draw_object_entities(newid), 1.0 ; 永続オブジェクトの初期値
    	}else{
    		set_easetime_all draw_object_entities(newid), life
    	}
    swbreak
    case MOVE_TYPE_STATIC
    	draw_object_entities(newid) = make_static_obj(_x, _y, _w, _h)
    swend
    return newid
    
#deffunc destroy_draw_object int id
    draw_object_life(id) = LIFE_INSTANT
    return
    
#deffunc destroy_draw_object_immediately int id
	; IDを解放
    del_list_id draw_object_id_manager, id

	; エンティティの種類に応じて削除処理
	switch draw_object_move_type(id)
	case MOVE_TYPE_PHYSIS
		del_physis_obj draw_object_entities(id)
	swbreak
	case MOVE_TYPE_EASE
		del_ease_obj draw_object_entities(id)
	swbreak
	case MOVE_TYPE_STATIC
		del_static_obj draw_object_entities(id)
	swbreak
	swend

	return

#deffunc get_basic_params array a
	if フラグ: dialog"描画ラベル以外でget_basic_paramsが呼び出されました": end
	a = 0.0
	a = x,y,w,h,alpha,angle
	return
	
#deffunc get_extra_params array a
	if フラグ: dialog"描画ラベル以外でget_extra_paramsが呼び出されました": end
	if draw_object_params(obj_id) == "": return 0
	split draw_object_params(obj_id), ",", a
	return stat

//利用側で使う
#deffunc set_extra_param int id, int idx, str newval
	split draw_object_params(id), ",", tmp
	tmp(idx) = newval
	s = tmp(0)
	repeat stat - 1
		s += "," + tmp(cnt+1)
	loop
	draw_object_params(id) = s
	return stat
//利用側で使う
#defcfunc get_extra_param int id, int idx
	split draw_object_params(id), ",", tmp
	return tmp(idx)
//利用側で使う
#deffunc set_all_extra_params int id, str s1
	draw_object_params(id) = s1
	return
//利用側で使う
#defcfunc count_extra_params int id
	if draw_object_params(id) == 0: return 0
	split draw_object_params(id), ",", tmp
	return length(tmp)
	
#deffunc draw_objects
    
	sort_list_by_value_array draw_object_id_manager, draw_object_priority
	
	フラグ = 0
    foreach_list draw_object_id_manager, obj_id
    
        entity_id = draw_object_entities(obj_id) //描画オブジェクトの種類ごとのID

        //描画情報取得 -> (x, y, w, h, alpha, angle) を取得

		switch draw_object_move_type(obj_id)
		
		case MOVE_TYPE_PHYSIS
			//アップデート処理
			update_physis_obj entity_id, global_draw_dt

			x = get_physis_posx (entity_id)
			y = get_physis_posy (entity_id)
			w = get_physis_sizex(entity_id)
			h = get_physis_sizey(entity_id)
			alpha = get_physis_alpha(entity_id)
			angle = get_physis_angle(entity_id)
		swbreak
		
		case MOVE_TYPE_EASE

			elapsed = draw_object_life_elapsed(obj_id)
			
			x = get_ease_posx (entity_id, elapsed)
			y = get_ease_posy (entity_id, elapsed)
			w = get_ease_sizex(entity_id, elapsed)
			h = get_ease_sizey(entity_id, elapsed)
			alpha = get_ease_alpha(entity_id, elapsed)
			angle = get_ease_angle(entity_id, elapsed)
		swbreak
		
		case MOVE_TYPE_STATIC

			x = get_static_posx(entity_id)
			y = get_static_posy(entity_id)
			w = get_static_sizex(entity_id)
			h = get_static_sizey(entity_id)
			alpha = get_static_alpha(entity_id)
			angle = get_static_angle(entity_id)
		swbreak
		swend
		
		//描画ラベルを呼ぶ
    	get_label_set labs, draw_object_draw_type(obj_id), func
    	gosub func
		

        //ライフ進行処理

         draw_object_life_elapsed(obj_id) += global_draw_dt

		 if draw_object_life(obj_id) < LIFE_FOREVER{
		    draw_object_life(obj_id) -= global_draw_dt
		    if draw_object_life(obj_id) <= 0.0 {
		        destroy_draw_object_immediately obj_id
		    }
		}
		
    foreach_list_end
    フラグ = 1
    
    return
    
#defcfunc get_entity_id int id
	return draw_object_entities(id)
	
#deffunc notify_dt_draw_object double d
    global_draw_dt = d
	return
	
#defcfunc is_eternal_draw_object int id
    return draw_object_life(id) >= LIFE_FOREVER

#deffunc update_priority_draw_object int id, int _priority
	draw_object_priority(id) = _priority
	return

#deffunc update_params_draw_object int id, str s1
    draw_object_params(id) = s1
	return
	
//ライフ操作系
#deffunc reset_life_draw_object int id
    draw_object_life(id) = draw_object_max_life(id)
    draw_object_life_elapsed(id) = 0.
	return

#deffunc extend_life_draw_object int id, double extra
    if draw_object_life(id) < LIFE_FOREVER {
        draw_object_life(id) += extra
        draw_object_life(id) = limitf(draw_object_life(id), 0.0, draw_object_max_life(id))
    }
	return

//make_draw_object ラッパー
#defcfunc make_forever_draw_object int move_type, str draw_type, array rect, str params
    x = (rect(0) + rect(2)) / 2
    y = (rect(1) + rect(3)) / 2
    w = rect(2) - rect(0)
    h = rect(3) - rect(1)
    return make_draw_object(move_type, draw_type, LIFE_FOREVER, x, y, w, h, params)
    
#deffunc make_instant_draw_object str draw_type, double _x, double _y, double _w, double _h, str params
    return make_draw_object(MOVE_TYPE_STATIC, draw_type, LIFE_INSTANT, _x, _y, _w, _h, params)

#global
init_draw_objects


#endif