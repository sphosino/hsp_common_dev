#ifndef find_tags_bytag
#define MODULE_DEBUG
#module
#defcfunc find_tags_bytag str s1, str tag, array result
    s = s1

	sdim result
    result_num = 0
    
    point = 0 //読み取り中の位置

    is_comment_mode = 0; コメントモード
	is_script_mode = 0 ; スクリプトタグ内では色々処理をスキップする

	is_inside_tag = 0 ; 0 = タグが開始されていない ; 1 = タグ開始済み
	tag_start_pos = -1 //タグがどこから開始されたか
	sdim now_tag_name //現在処理中のタグ名
	tag_type = 0 ; 0 = 開始タグ ; 1 = 終了タグ
	sdim tag_stack //タグスタック
	dim tag_start_stack// そのタグの開始位置スタック 
    tag_stack_num = 0
	token_started = 0; トークンが未開始 ; 1 = トークン開始済み
	

	#enum MODE_TAG_NAME = 0   // タグ名取得中
	#enum MODE_ATTRIBUTE_NAME // 属性名取得中
	#enum MODE_ATTRIBUTE_VALUE// 属性値取得中

	取得モード = MODE_TAG_NAME

   charstr = " "
   while point < strlen(s)
        char = peek(s, point)
        ;poke charstr,,char: logmes charstr
        switch char
    	case '<'
    		if is_comment_mode: swbreak
    		if is_instr: swbreak
    		is_inside_tag = 1
    		tag_start_pos = point
    		tag_type = 0
    		token_started = 0
    		取得モード = MODE_TAG_NAME
    	swbreak
    	
    	case '/'
    	
    		if is_comment_mode: swbreak
    		if is_instr: swbreak
    		if is_inside_tag == 1{
	    		if 取得モード == MODE_TAG_NAME{
        			tag_type = 1
        			if token_started == 1{
	        			get_token
	        		}
        		}
        	}
    	swbreak
    	
    	case '>'
    		if is_instr: swbreak
    		
    		if closing_hyphen_count >= 2{
	    		closing_hyphen_count = 0
	    		is_comment_mode = 0
				hyphen_count = 0
				hyphen_counting_mode = 0
				取得モード = MODE_TAG_NAME
	    		swbreak
	    	}
	    	if is_comment_mode: swbreak
    		if (is_inside_tag == 0): swbreak
	        if token_started{
		        get_token
	        }else{
		        if 取得モード == MODE_TAG_NAME: swbreak //空タグ
		    }
    		// 開始タグ処理
    		if tag_type == 0 {
        		if is_self_closing(now_tag_name) == 0{
	        		if (is_script_mode == 0){ //スクリプトモード中はタグを積まない
	        			tag_stack(tag_stack_num) = now_tag_name
	        			tag_start_stack(tag_stack_num) = tag_start_pos
	        			tag_stack_num++
        			}
    			}else{ //自己終了タグ
    				if now_tag_name == tag{
    					result(result_num) = strmid(s, tag_start_pos, point - tag_start_pos + 1)
    					result_num++
    				}
        		}
    		}else: if tag_type == 1 {
        		is_valid_tag = 0
				repeat tag_stack_num
					if now_tag_name == tag_stack.cnt{
						is_valid_tag = 1
						break
					}
				loop
        		if is_valid_tag{
        			while tag_stack_num
        				tag_stack_num--
        				top_tag = tag_stack(tag_stack_num)

    					if now_tag_name != top_tag{
	    					自動補完 = "</" + top_tag + ">"
	    				}else{
		    				自動補完 = ""
		    			}
		    			if tag == top_tag{
	    					result(result_num)  = strmid(s, tag_start_stack(tag_stack_num), tag_start_pos - tag_start_stack(tag_stack_num))
	    					result(result_num) += 自動補完
	    					result(result_num) += strmid(s, tag_start_pos, point - tag_start_pos + 1)
	    					result_num++
	    				}
        				if top_tag == now_tag_name: _break
        			wend
        			if top_tag == "script"{
	        			;mes tag_stack_num
				    	is_script_mode = 0
				    }
    			}else{
        			logmes "オープンされていないタグが閉じられようとしています -> " + now_tag_name + "  " + tag_stack_num
        		}
    		}
 
    		// タグの解析をリセット
    		is_inside_tag = 0
    		token_started = 0
    		tag_type = 0
    		now_tag_name = ""
    		is_instr = 0
    	swbreak
    	case '='
			if 取得モード == MODE_ATTRIBUTE_NAME{
				if token_started{
					get_token
				}
				取得モード = MODE_ATTRIBUTE_VALUE
			}
    	swbreak
    	case '\''
    	case '"'
    		if (is_instr == 1) && (char == instr_start_char){
	    		
	    		is_instr = 0
	    		取得モード = MODE_ATTRIBUTE_NAME
	    		instr_start_char = -1
	    	}else{
				if 取得モード == MODE_ATTRIBUTE_VALUE || is_script_mode{
					is_instr = 1
					instr_start_char = char
					start_str = point
				}
			}
    	swbreak
    	default
    		if (char != '-') && (char != ' ') && (char != 9){
	    		hyphen_count = 0
			    closing_hyphen_count = 0
			    hyphen_counting_mode = 0
			}
			
    		if (char >='a' && char <= 'z') || (char >= 'A' &&  char <= 'Z')|| (char=='_'){ //最初の文字
    			if comment_mode{ swbreak}
	        	if is_inside_tag == 1{
					if token_started == 0{
						token_started = 1
					    token_start_pos = point
			        }
	        	}
		        
        	}else: if (char >='0' && char <= '9') || char == '.'{ //２文字目以降
        		if is_comment_mode{ swbreak}
        		if is_inside_tag == 1{
	        		if token_started == 0{
			        	//１文字目に来た
			        	logmes "２文字目以降に許可された文字が１文字目に来ました"
			        	swbreak
			        }else: if token_started == 1{
				        //２文字目以降に来た = 何もしない
				    }
				}
				
		     }else: if char == '!'{
			    if is_comment_mode{ swbreak}
				if is_inside_tag && (取得モード == MODE_TAG_NAME) && (token_started == 0){
					hyphen_counting_mode = 1 //コメントになりえるのでハイフンを数え始める。
				}
			}else:if char == '-'{						    
			    if is_comment_mode{
				    closing_hyphen_count++
				}else{
					if hyphen_counting_mode{
					    hyphen_count++
					    if hyphen_count == 2{
						    is_comment_mode = 1
						}
					}
				}
			}else{
				if is_comment_mode{ swbreak}
				//その他のトークン

				if token_started{
					get_token
				}
			}

    	swbreak
        swend
        point++
    wend
	//閉じられずに処理が終了したら自動的に閉じる
	while tag_stack_num
		tag_stack_num--
		top_tag = tag_stack(tag_stack_num)
		自動補完 = "</" + top_tag + ">"
		if tag == top_tag{
			result(result_num) = strmid(s, tag_start_stack(tag_stack_num), point - tag_start_stack(tag_stack_num))
			result(result_num)+= 自動補完
			result_num++
		}
	wend
    return result_num
#deffunc get_token
		token = strmid(s, token_start_pos, point - token_start_pos)
		switch 取得モード
		case MODE_TAG_NAME
			now_tag_name = token
			if now_tag_name == "script" && tag_type == 0{
				if is_script_mode == 0{
					is_script_mode = 1
					script_start_pos = tag_start_pos
        			tag_stack(tag_stack_num) = now_tag_name
        			tag_start_stack(tag_stack_num) = tag_start_pos
        			tag_stack_num++
				}
			}else{
				取得モード = MODE_ATTRIBUTE_NAME
			}
		swbreak
		case MODE_ATTRIBUTE_NAME
		swbreak
		case MODE_ATTRIBUTE_VALUE
			取得モード = MODE_ATTRIBUTE_NAME
		swbreak
		swend
		token_started = 0
	return
#defcfunc is_self_closing str tag
    if instr(self_closing_tags, 0,"," + tag + ",") >= 0 : return 1
    return 0
    
#deffunc init_self_closing_tags
    self_closing_tags = ",br,img,input,meta,link,hr,"
    return
#global
init_self_closing_tags
#endif


#ifdef MODULE_DEBUG
#undef mes 
#define mes(%1) mes@hsp %1:logmes %1
screen 0, 1200

mes "==== 強化テスト開始 ===="
;/*
;
; テストケース8: 属性内にタグのような文字列が含まれる場合
;
test_input = "<div data='<fake>tag</fake>'>real</div>"
tag = "div"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 1 {
    mes "テスト8 失敗: 結果数が不正です " + res_num
} else : if res(0) != test_input {
    mes "テスト8 失敗: 属性内の疑似タグを誤検出 ["+res(0)+"]"
} else {
    mes "テスト8 成功"
}
;
; テストケース9: 複雑なネスト構造
;
test_input = "<ul><li>1<ul><li>1.1</li></ul></li><li>2</li></ul>"
tag = "li"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
expected = "<li>1<ul><li>1.1</li></ul></li>","<li>1.1</li>", "<li>2</li>"

if res_num != 3 {
    mes "テスト9 失敗: 結果数が不正です " + res_num
} else {
    repeat 3: m = cnt
    	is_exist = 0
    	repeat 3
	        if res(cnt) == expected(m) {
	            is_exist == 1
	            break
	        }
        loop
        if is_exist == 0: mes "テスト9 失敗: 項目"+expected(m)
    loop
    mes "テスト9 成功"
}
;
; テストケース10: 混合自己終了タグ
;
test_input = "<p><br/><img src='a.jpg'/>text</p>"
tag = "p"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 1{
	mes "テスト10 失敗: 結果数が不正です " + res_num
}else : if res(0) != test_input {
    mes "テスト10 失敗: 結果不一致 ["+res(0)+"]"
} else {
    mes "テスト10 成功"
}

;
; テストケース11: 不正なネスト
;
test_input = "<div><span></div></span>"
tag = "div"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 1 {
    mes "テスト11 失敗: 結果数が不正です " + res_num
} else : if res(0) != "<div><span></div>" {
    mes "テスト11 失敗: 不正なネスト処理 ["+res(0)+"]"
} else {
    mes "テスト11 成功"
}

;
; テストケース12: コメント内のタグ無視
;
test_input = "<h2>< !-- <div>fake</div> -  -><real>true</real></h2>"
tag = "div"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 0 {
    mes "テスト12 失敗: コメント内タグを誤検出 " + res_num
} else {
    mes "テスト12 成功"
}

;
; テストケース13: スクリプトタグ内の処理
;
test_input = "<script>if (a < 0) && (b > 3) || (e<<3 > 512){str = \"<h2>\"}</script><div>real</div>"
tag = "script"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 1 {
    mes "テスト13 失敗: 結果数が不正です " + res_num
} else : if instr(res(0), 0, "<script>") != 0 {
    mes "テスト13 失敗: スクリプト内容の処理エラー ["+res(0)+"]"
} else {
    mes "テスト13 成功"
}

;
; テストケース14: 長いタグ名と属性
;

sdim long_tag, 301
sdim long_tag2, 501
repeat 300
	poke long_tag, cnt, 'a' + rnd(26)
loop
repeat 500
	poke long_tag2, cnt, 'a' + rnd(26)
loop
test_input = "<" + long_tag + " a='"+long_tag2+"'>test< /" + long_tag + ">"
logmes test_input
tag = long_tag
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 1 {
    mes "テスト14 失敗: 結果数が不正です " + res_num
} else : if strlen(res(0)) != strlen(test_input) {
    mes "テスト14 失敗: 長いタグの処理失敗"
} else {
    mes "テスト14 成功"
}

;
; テストケース15: 特殊文字を含む属性
;
test_input = "<input name='a[]' value='/>'>"
tag = "input"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res_num != 1 {
    mes "テスト15 失敗: 結果数が不正です " + res_num
} else : if res(0) != test_input {
    mes "テスト15 失敗: 特殊属性の処理失敗 ["+res(0)+"]"
} else {
    mes "テスト15 成功"
}
;*/

;
; テストケース16: エスケープ文字を含む属性
;
test_input = "<div title='\\\'</div\\'>'></div>"
tag = "div"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res != test_input{
	mes "テスト16 失敗"
	mes "expected -> " + test_input
	mes "result   -> " + res
}else{
	mes "テスト16 成功"
}

test_input = "<script>document.write('<script>')</script>"
tag = "script"
sdim res
res_num = find_tags_bytag(test_input, tag, res)

if res != test_input{
	mes "テスト17 失敗"
	mes "expected -> " + test_input
	mes "result   -> " + res
}else{
	mes "テスト17 成功"
}

test_input = "<img\nsrc='test.jpg'\nalt='test'>"
tag = "img"
sdim res
res_num = find_tags_bytag(test_input, tag, res)
if res != test_input{
	mes "テスト18 失敗"
	mes "expected -> " + test_input
	mes "result   -> " + res
}else{
	mes "テスト18 成功"
}


mes "==== 強化テスト終了 ===="
stop
#endif